{"version":3,"sources":["components/ProductItem/ProductItem.js","components/ProductList/ProductList.js","App.js","serviceWorker.js","index.js"],"names":["ProductItem","item","rub","op","className","oldPrice","discImg","discountPercent","discount","src","imgUrl","alt","amount","name","ProductList","id","map","o","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAEe,SAASA,EAAT,GAAgC,IAATC,EAAQ,EAARA,KAC9BC,EAAM,wCACNC,EACJ,yBAAKC,UAAU,aACZH,EAAKI,SACLH,GAGCI,EACJ,yBAAKF,UAAU,WACb,yBAAKA,UAAU,MACdH,EAAKM,gBAFR,IAE0B,KAG5B,OACE,yBAAKH,UAAU,QACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,SACdH,EAAKO,UAAYF,EAClB,yBAAKG,IAAKR,EAAKS,OAAQC,IAAI,OAAOP,UAAU,UAC5C,yBAAKA,UAAU,SACb,2BACGH,EAAKW,OACLV,GAEFD,EAAKO,UAAYL,GAEpB,yBAAKC,UAAU,WAAWH,EAAKY,QC1BxB,SAASC,IA2CtB,OACE,6BA3Ce,CACf,CACEC,GAAI,EACJF,KAAM,8EACND,OAAQ,MACRJ,UAAU,EACVD,gBAAiB,GACjBF,SAAU,MACVK,OACE,uFAEJ,CACEK,GAAI,EACJF,KAAM,0FACND,OAAQ,MACRJ,UAAU,EACVD,gBAAiB,GACjBF,SAAU,KACVK,OACE,4FAEJ,CACEK,GAAI,EACJF,KAAM,qGACND,OAAQ,IACRJ,UAAU,EACVD,gBAAiB,GACjBF,SAAU,KACVK,OACE,4FAEJ,CACEK,GAAI,EACJF,KAAM,wJACND,OAAQ,IACRJ,UAAU,EACVD,gBAAiB,GACjBF,SAAU,IACVK,OACE,6FAKQM,KAAI,SAAAC,GAAC,OACb,kBAACjB,EAAD,CAAaC,KAAMgB,QCtCZC,MANf,WACE,OACE,kBAACJ,EAAD,OCKgBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d750d50b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function ProductItem({ item }) {\n  const rub = <span>₽</span>;\n  const op = (\n    <div className=\"old-price\">\n      {item.oldPrice}\n      {rub}\n    </div>\n  );\n  const discImg = (\n    <div className=\"discImg\">\n      <div className=\"d\"></div>\n      {item.discountPercent}%{\" \"}\n    </div>\n  );\n  return (\n    <div className=\"main\">\n      <div className=\"main-block\">\n        <div className=\"sale\"></div>\n        {item.discount && discImg}\n        <img src={item.imgUrl} alt=\"imag\" className=\"image\" />\n        <div className=\"price\">\n          <b>\n            {item.amount}\n            {rub}\n          </b>\n          {item.discount && op}\n        </div>\n        <div className=\"details\">{item.name}</div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ProductItem from \"../ProductItem/ProductItem\";\n\nexport default function ProductList() {\n  const products = [\n    {\n      id: 1,\n      name: \"Кофемашина De'Longhi ECAM\",\n      amount: 30300,\n      discount: true,\n      discountPercent: 12,\n      oldPrice: 35090,\n      imgUrl:\n        \"https://avatars.mds.yandex.net/get-mpic/1726038/img_id4577464176292682619/x166_trim\"\n    },\n    {\n      id: 2,\n      name: \"Nutella Паста ореховая\",\n      amount: 15815,\n      discount: false,\n      discountPercent: 12,\n      oldPrice: 1234,\n      imgUrl:\n        \"https://avatars.mds.yandex.net/get-mpic/1865271/img_id3690065316049468561.jpeg/x166_trim\"\n    },\n    {\n      id: 3,\n      name: \"Пюре Тёма говядина\",\n      amount: 450,\n      discount: false,\n      discountPercent: 12,\n      oldPrice: 1234,\n      imgUrl:\n        \"https://avatars.mds.yandex.net/get-mpic/1614201/img_id8327003236989896679.jpeg/x166_trim\"\n    },\n    {\n      id: 4,\n      name: \"Орахисовая паста (без сахара)\",\n      amount: 204,\n      discount: true,\n      discountPercent: 62,\n      oldPrice: 500,\n      imgUrl:\n        \"https://avatars.mds.yandex.net/get-mpic/1478677/img_id7605143035883805280.jpeg/x166_trim\"\n    }\n  ];\n  return (\n    <div>\n      {products.map(o => (\n        <ProductItem item={o} />\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\n \nimport './App.css';\nimport ProductList from './components/ProductList/ProductList';\n\nfunction App() {\n  return (\n    <ProductList  />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}